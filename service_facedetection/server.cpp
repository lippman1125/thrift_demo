// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/transport/TNonblockingServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TNonblockingServerTransport.h>
#include <thrift/server/TNonblockingServer.h>


#include <gflags/gflags.h>
#include <glog/logging.h>

#include "FaceDetect.h"
#include "face_detection_handler.hpp"

using namespace ::apache::thrift;
using namespace ::apache::thrift::concurrency;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

#if 0
int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<FaceDetectHandler> handler(new FaceDetectHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new FaceDetectProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
#endif

DEFINE_int32(port, 9090, "The port of face detection service.");
DEFINE_int32(thread_pool_size, 5, "The size of thrift worker thread pool.");

int main(int argc, char **argv) {
    google::ParseCommandLineFlags(&argc, &argv, true);
    google::InstallFailureSignalHandler();
    google::InitGoogleLogging(argv[0]);

    ::apache::thrift::stdcxx::shared_ptr<FaceDetectHandler> handler(new FaceDetectHandler());
    ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new FaceDetectProcessor(handler));
    ::apache::thrift::stdcxx::shared_ptr<TNonblockingServerTransport> serverTransport(new TNonblockingServerSocket(FLAGS_port));
    ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
    ::apache::thrift::stdcxx::shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(FLAGS_thread_pool_size);
    ::apache::thrift::stdcxx::shared_ptr<PosixThreadFactory> threadFactory =
        ::apache::thrift::stdcxx::shared_ptr<PosixThreadFactory> (new PosixThreadFactory());
    threadManager->threadFactory(threadFactory);
    threadManager->start();
    TNonblockingServer server(processor, protocolFactory, serverTransport, threadManager);
    server.serve();
}
