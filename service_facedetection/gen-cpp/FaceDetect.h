/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FaceDetect_H
#define FaceDetect_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "face_detection_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FaceDetectIf {
 public:
  virtual ~FaceDetectIf() {}
  virtual void Detect(DetectionResult& _return, const DetectionInput& input) = 0;
};

class FaceDetectIfFactory {
 public:
  typedef FaceDetectIf Handler;

  virtual ~FaceDetectIfFactory() {}

  virtual FaceDetectIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FaceDetectIf* /* handler */) = 0;
};

class FaceDetectIfSingletonFactory : virtual public FaceDetectIfFactory {
 public:
  FaceDetectIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FaceDetectIf>& iface) : iface_(iface) {}
  virtual ~FaceDetectIfSingletonFactory() {}

  virtual FaceDetectIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FaceDetectIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FaceDetectIf> iface_;
};

class FaceDetectNull : virtual public FaceDetectIf {
 public:
  virtual ~FaceDetectNull() {}
  void Detect(DetectionResult& /* _return */, const DetectionInput& /* input */) {
    return;
  }
};

typedef struct _FaceDetect_Detect_args__isset {
  _FaceDetect_Detect_args__isset() : input(false) {}
  bool input :1;
} _FaceDetect_Detect_args__isset;

class FaceDetect_Detect_args {
 public:

  FaceDetect_Detect_args(const FaceDetect_Detect_args&);
  FaceDetect_Detect_args& operator=(const FaceDetect_Detect_args&);
  FaceDetect_Detect_args() {
  }

  virtual ~FaceDetect_Detect_args() throw();
  DetectionInput input;

  _FaceDetect_Detect_args__isset __isset;

  void __set_input(const DetectionInput& val);

  bool operator == (const FaceDetect_Detect_args & rhs) const
  {
    if (!(input == rhs.input))
      return false;
    return true;
  }
  bool operator != (const FaceDetect_Detect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceDetect_Detect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FaceDetect_Detect_pargs {
 public:


  virtual ~FaceDetect_Detect_pargs() throw();
  const DetectionInput* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceDetect_Detect_result__isset {
  _FaceDetect_Detect_result__isset() : success(false) {}
  bool success :1;
} _FaceDetect_Detect_result__isset;

class FaceDetect_Detect_result {
 public:

  FaceDetect_Detect_result(const FaceDetect_Detect_result&);
  FaceDetect_Detect_result& operator=(const FaceDetect_Detect_result&);
  FaceDetect_Detect_result() {
  }

  virtual ~FaceDetect_Detect_result() throw();
  DetectionResult success;

  _FaceDetect_Detect_result__isset __isset;

  void __set_success(const DetectionResult& val);

  bool operator == (const FaceDetect_Detect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceDetect_Detect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceDetect_Detect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FaceDetect_Detect_presult__isset {
  _FaceDetect_Detect_presult__isset() : success(false) {}
  bool success :1;
} _FaceDetect_Detect_presult__isset;

class FaceDetect_Detect_presult {
 public:


  virtual ~FaceDetect_Detect_presult() throw();
  DetectionResult* success;

  _FaceDetect_Detect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FaceDetectClient : virtual public FaceDetectIf {
 public:
  FaceDetectClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FaceDetectClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Detect(DetectionResult& _return, const DetectionInput& input);
  void send_Detect(const DetectionInput& input);
  void recv_Detect(DetectionResult& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FaceDetectProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FaceDetectIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FaceDetectProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Detect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FaceDetectProcessor(::apache::thrift::stdcxx::shared_ptr<FaceDetectIf> iface) :
    iface_(iface) {
    processMap_["Detect"] = &FaceDetectProcessor::process_Detect;
  }

  virtual ~FaceDetectProcessor() {}
};

class FaceDetectProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FaceDetectProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FaceDetectIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FaceDetectIfFactory > handlerFactory_;
};

class FaceDetectMultiface : virtual public FaceDetectIf {
 public:
  FaceDetectMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<FaceDetectIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FaceDetectMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<FaceDetectIf> > ifaces_;
  FaceDetectMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<FaceDetectIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Detect(DetectionResult& _return, const DetectionInput& input) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Detect(_return, input);
    }
    ifaces_[i]->Detect(_return, input);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FaceDetectConcurrentClient : virtual public FaceDetectIf {
 public:
  FaceDetectConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FaceDetectConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Detect(DetectionResult& _return, const DetectionInput& input);
  int32_t send_Detect(const DetectionInput& input);
  void recv_Detect(DetectionResult& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
