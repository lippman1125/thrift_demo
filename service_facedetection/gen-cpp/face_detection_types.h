/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef face_detection_TYPES_H
#define face_detection_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class DetectionInput;

class DetectionResult;


class DetectionInput : public virtual ::apache::thrift::TBase {
 public:

  DetectionInput(const DetectionInput&);
  DetectionInput& operator=(const DetectionInput&);
  DetectionInput() : img() {
  }

  virtual ~DetectionInput() throw();
  std::string img;

  void __set_img(const std::string& val);

  bool operator == (const DetectionInput & rhs) const
  {
    if (!(img == rhs.img))
      return false;
    return true;
  }
  bool operator != (const DetectionInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DetectionInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DetectionInput &a, DetectionInput &b);

std::ostream& operator<<(std::ostream& out, const DetectionInput& obj);


class DetectionResult : public virtual ::apache::thrift::TBase {
 public:

  DetectionResult(const DetectionResult&);
  DetectionResult& operator=(const DetectionResult&);
  DetectionResult() {
  }

  virtual ~DetectionResult() throw();
  std::vector<std::vector<double> >  detections;

  void __set_detections(const std::vector<std::vector<double> > & val);

  bool operator == (const DetectionResult & rhs) const
  {
    if (!(detections == rhs.detections))
      return false;
    return true;
  }
  bool operator != (const DetectionResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DetectionResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DetectionResult &a, DetectionResult &b);

std::ostream& operator<<(std::ostream& out, const DetectionResult& obj);



#endif
