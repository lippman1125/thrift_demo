/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "face_detection_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




DetectionInput::~DetectionInput() throw() {
}


void DetectionInput::__set_img(const std::string& val) {
  this->img = val;
}
std::ostream& operator<<(std::ostream& out, const DetectionInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DetectionInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_img = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->img);
          isset_img = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_img)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DetectionInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DetectionInput");

  xfer += oprot->writeFieldBegin("img", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->img);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DetectionInput &a, DetectionInput &b) {
  using ::std::swap;
  swap(a.img, b.img);
}

DetectionInput::DetectionInput(const DetectionInput& other0) {
  img = other0.img;
}
DetectionInput& DetectionInput::operator=(const DetectionInput& other1) {
  img = other1.img;
  return *this;
}
void DetectionInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DetectionInput(";
  out << "img=" << to_string(img);
  out << ")";
}


DetectionResult::~DetectionResult() throw() {
}


void DetectionResult::__set_detections(const std::vector<std::vector<double> > & val) {
  this->detections = val;
}
std::ostream& operator<<(std::ostream& out, const DetectionResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DetectionResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_detections = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->detections.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->detections.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              {
                this->detections[_i6].clear();
                uint32_t _size7;
                ::apache::thrift::protocol::TType _etype10;
                xfer += iprot->readListBegin(_etype10, _size7);
                this->detections[_i6].resize(_size7);
                uint32_t _i11;
                for (_i11 = 0; _i11 < _size7; ++_i11)
                {
                  xfer += iprot->readDouble(this->detections[_i6][_i11]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_detections = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_detections)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DetectionResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DetectionResult");

  xfer += oprot->writeFieldBegin("detections", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->detections.size()));
    std::vector<std::vector<double> > ::const_iterator _iter12;
    for (_iter12 = this->detections.begin(); _iter12 != this->detections.end(); ++_iter12)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*_iter12).size()));
        std::vector<double> ::const_iterator _iter13;
        for (_iter13 = (*_iter12).begin(); _iter13 != (*_iter12).end(); ++_iter13)
        {
          xfer += oprot->writeDouble((*_iter13));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DetectionResult &a, DetectionResult &b) {
  using ::std::swap;
  swap(a.detections, b.detections);
}

DetectionResult::DetectionResult(const DetectionResult& other14) {
  detections = other14.detections;
}
DetectionResult& DetectionResult::operator=(const DetectionResult& other15) {
  detections = other15.detections;
  return *this;
}
void DetectionResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DetectionResult(";
  out << "detections=" << to_string(detections);
  out << ")";
}


