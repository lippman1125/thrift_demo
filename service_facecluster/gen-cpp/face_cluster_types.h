/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef face_cluster_TYPES_H
#define face_cluster_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class ClusterInput;

class ClusterResult;

typedef struct _ClusterInput__isset {
  _ClusterInput__isset() : uid(false), did(false) {}
  bool uid :1;
  bool did :1;
} _ClusterInput__isset;

class ClusterInput : public virtual ::apache::thrift::TBase {
 public:

  ClusterInput(const ClusterInput&);
  ClusterInput& operator=(const ClusterInput&);
  ClusterInput() : uid(0), did() {
  }

  virtual ~ClusterInput() throw();
  std::vector<std::vector<double> >  featurelist;
  int64_t uid;
  std::string did;

  _ClusterInput__isset __isset;

  void __set_featurelist(const std::vector<std::vector<double> > & val);

  void __set_uid(const int64_t val);

  void __set_did(const std::string& val);

  bool operator == (const ClusterInput & rhs) const
  {
    if (!(featurelist == rhs.featurelist))
      return false;
    if (__isset.uid != rhs.__isset.uid)
      return false;
    else if (__isset.uid && !(uid == rhs.uid))
      return false;
    if (__isset.did != rhs.__isset.did)
      return false;
    else if (__isset.did && !(did == rhs.did))
      return false;
    return true;
  }
  bool operator != (const ClusterInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClusterInput &a, ClusterInput &b);

std::ostream& operator<<(std::ostream& out, const ClusterInput& obj);

typedef struct _ClusterResult__isset {
  _ClusterResult__isset() : busy(false) {}
  bool busy :1;
} _ClusterResult__isset;

class ClusterResult : public virtual ::apache::thrift::TBase {
 public:

  ClusterResult(const ClusterResult&);
  ClusterResult& operator=(const ClusterResult&);
  ClusterResult() : cluster_num(0), busy(0) {
  }

  virtual ~ClusterResult() throw();
  int32_t cluster_num;
  std::vector<int32_t>  labels;
  bool busy;

  _ClusterResult__isset __isset;

  void __set_cluster_num(const int32_t val);

  void __set_labels(const std::vector<int32_t> & val);

  void __set_busy(const bool val);

  bool operator == (const ClusterResult & rhs) const
  {
    if (!(cluster_num == rhs.cluster_num))
      return false;
    if (!(labels == rhs.labels))
      return false;
    if (__isset.busy != rhs.__isset.busy)
      return false;
    else if (__isset.busy && !(busy == rhs.busy))
      return false;
    return true;
  }
  bool operator != (const ClusterResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusterResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClusterResult &a, ClusterResult &b);

std::ostream& operator<<(std::ostream& out, const ClusterResult& obj);



#endif
